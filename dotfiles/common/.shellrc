###########################
# Shell Agnostic Commands #
###########################

# Warnings
############
if ! command -v git >/dev/null 2>&1; then
  echo "You do not have git.\n DO NOT DO ANYTHING WITHOUT GIT\n"
  echo "You might want to install brew with getBrew\n"
  echo "Once you have brew just run\nbrew install git"
fi

# Aliases
###########

if [ ! -f ~/blank/ ]; then
  mkdir -p ~/blank/
fi

alias foldel='time rsync -avv --delete /home/$USER/blank/ '

# Copy anything [ command | copy ]
alias copy='xclip -sel clip'

# Termbin (use to pipe output, eg. ls | tb)
alias tb="nc termbin.com 9999"

# Ripgrep
alias rg=rg --ignore-file $HOME/.config/ripgrep/ignore 

# Functions
############

# Spit out a deduplicated PATH
pathdup() {
if [ -n "$PATH" ]; then
old_PATH=$PATH:; PATH=
 while [ -n "$old_PATH" ]; do
x=${old_PATH%%:*}       # the first remaining entry
case $PATH: in
*:"$x":*) ;;         # already there
*) PATH=$PATH:$x;;    # not there yet
 esac
old_PATH=${old_PATH#*:}
done
PATH=${PATH#:}
unset old_PATH x
fi  
}

# Calibre Upgrade
caliup() {
  sudo -v && wget --no-check-certificate -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"
}

# Transfer.sh
transfer() { if [ $# -eq 0 ]; then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; }

# Image resizer
smartresize() {
   mogrify -path $3 -filter Triangle -define filter:support=2 -thumbnail $2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $1
}

# Libgen Downloader
libgen () {
local args=$1
local genio='http://libgen.io/book/index.php?md5='
local genrus='http://gen.lib.rus.ec/book/index.php?md5='

if [ -z "${args##*$genio*}" ] ;then
  local cHashgenio=${@#$genio}
  echo "[DEBUG] ARGS=${args}"
  echo "[INFO] The hash will be extracted."
  local MD5=${cHashgenio}
elif [ -z "${args##*$genrus*}" ]; then
  local cHashgenrus=${@#$genrus}
  echo "[DEBUG] ARGS=${args}"
  echo "[INFO] The hash will be extracted."
  local MD5=${cHashgenrus}
else
  echo "[DEBUG] ARGS=${args}"
  local MD5=${args}
fi
echo "[INFO] MD5=${MD5}"

# The whole Key thing stops working
# local URL='http://libgen.io/get.php?md5='
# local KEY=$(curl -sL "${URL}${MD5}" | grep -oE "key=[^']*" | cut -d'=' -f2)
# echo "[INFO] KEY=${KEY}"

# local FURL="${URL}${MD5}&key=${KEY}"

# Non-Key
local altURL='http://libgen.io/ads.php?md5='
local FURL="${altURL}${MD5}"

if command -v aria2c >/dev/null 2>&1; then
  aria2c -j2 "$FURL"
elif command -v wget >/dev/null 2>&1; then
  wget -v -c "${FURL}" -O "${MD5}.libgen"
  wget --trust-server-names -v -c "${FURL}"
else
  curl -L -J -O "${FURL}" --progress-bar
fi

# Check Hash
# md5sum $file???? == $MD5
}

getCloud() {
  fileName=$(curl -sI  "${1}" | grep -o -E 'filename=.*$' | sed -e 's/filename=//')
  echo $fileName
  if [[ ! -a $fileName ]]; then
    if command -v aria2c >/dev/null 2>&1; then
      aria2c -j2 "$1"
    elif command -v wget >/dev/null 2>&1; then
      wget -v -c "${1}"
      wget --trust-server-names -v -c "${1}"
    else
      curl -L -J -O "${1}" --progress-bar
    fi
  else
    echo "This file already exists."
  fi
}

# Sources
############

# GRE Word List
if [[ -d $HOME/.local/greWords/gre-cli-words ]]; then
  $HOME/.local/greWords/gre-cli-words/random_gre.sh $HOME/.local/greWords/gre-cli-words/custom_gre_word_list
  echo "\n"
else
  echo "You don't have gre-cli-words setup, try running getGREwords"
fi

# Nix
if [[ -d /nix ]]; then
  . $HOME/.nix-profile/etc/profile.d/nix.sh
else
  echo "You don't have nix installed"
fi


# Common Exports
###################

export XDG_CONFIG_HOME="$HOME/.config"

if command -v nvim >/dev/null 2>&1; then
  alias vim=nvim
  alias vi=nvim
  export EDITOR=nvim
else
  export EDITOR=vim
fi

if ! command -v fzf >/dev/null 2>&1; then
  if ! command -v rg >/dev/null 2>&1; then
    echo "Please get ripgrep working"
  else
    export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
    export FZF_DEFAULT_OPTS="--extended --ansi --multi"
  fi
  echo "Please get fzf working"
fi

# LANGUAGE must be set by en_US
export LANGUAGE="en_US.UTF-8"
export LANG="${LANGUAGE}"
export LC_ALL="${LANGUAGE}"
export LC_CTYPE="${LANGUAGE}"


# Path Additions
##################

# For the bundled scripts
export PATH="$HOME/.local/bin:$PATH"
export PATH="$PATH:$HOME/.local/bin/gitHelpers"
export PATH="$PATH:$HOME/.local/bin/droidHelpers"
export PATH="$PATH:$HOME/.local/bin/dockerHelpers"
export PATH="$PATH:$HOME/.local/bin/shellHelpers"
export PATH="$PATH:$HOME/.local/bin/fileHelpers"
export PATH="$PATH:$HOME/.local/bin/webHelpers"
export PATH="$PATH:$HOME/.local/bin/installHelpers"

# Tmux
##########

# PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'
# export TERM=xterm-256color
# alias tmux="tmux -2"

if command -v tmux >/dev/null 2>&1; then
  getTpm
else
  echo "You appear to be missing tmux"
fi

# Platform 
#############

if [ -f ~/.shellPlatform ]; then
  . ~/.shellPlatform
fi


# Specifics 
#############

if [ -f ~/.shellSpecifics ]; then
  . ~/.shellSpecifics
fi
