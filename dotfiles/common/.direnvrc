##########
# Python #
##########

# Usage: layout virtualenv
#
# Use python virtualenv functions. Basic function composes well with the rest
#
# https://virtualenv.pypa.io/en/stable/
#

layout_virtualenv() {
  local venv_path="$1"
  source ${venv_path}/bin/activate
}

# Usage: layout virtualenvwrapper
#
# Use virtualenvwrapper. This is sort of depreciated.
#
# https://virtualenvwrapper.readthedocs.io/en/latest/
#

layout_virtualenvwrapper() {
  local venv_path="${WORKON_HOME}/$1"
  layout_virtualenv $venv_path
}

# Usage: layout pipenv
#
# Recommended python setup. Loads the relevant pipenv virtualwrapper.
#
# https://docs.pipenv.org/
#

layout_pipenv() {
    layout_virtualenv $(pipenv --venv)
}

########
# Ruby #
########

# Usage (lines other than the first are optional):
## layout rvm
## rvm use $VERSION_NUMBER
## layout ruby
## PATH_add .direnv/bundler-bin
#
# This loads rvm only when needed. The remaining steps basically involve the appropriate ruby setup.
#
# https://rvm.io/
# https://github.com/direnv/direnv/wiki/Ruby
#

layout_rvm() {
    # RVM setup
    export rvm_ignore_dotfiles=yes

    if [[ ! -d "${HOME}/.rvm" ]]; then
        echo "You seem to be missing rvm, running getRVM now"
        getRVM
    fi
      # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
      export PATH="$PATH:$HOME/.rvm/bin"

      # RVM Fixes (per https://github.com/rvm/rvm/issues/3212)
      # Squelch the warning by appending ' > /dev/null 2>&1' here
      [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" > /dev/null 2>&1

      # RVM fixes whatever it considers the problem to be, on its own, in `rvm use`.
      # It also prints some junk we don't care about, so we squelch its output in the same way.
      rvm use default > /dev/null 2>&1

      # RVM bash completion
      [[ -r "$HOME/.rvm/scripts/completion" ]] && source "$HOME/.rvm/scripts/completion"
      # Direnv specials
      watch_file Gemfile
      watch_file .ruby_version
}

######
# Go #
######

# Usage: layout golang
#
# Sets up environment for a Go project using the alternative gb build tool. Also
# works with the official dep package.In addition to project executables on
# PATH, this includes an exclusive, project- local GOPATH which enables many
# tools like gocode and oracle to "just work".
#
# http://getgb.io/
# https://golang.github.io/dep/
#

layout_golang() {
  export GOPATH="$PWD/vendor:$PWD"
  PATH_add "$PWD/vendor/bin"
  PATH_add bin
}
