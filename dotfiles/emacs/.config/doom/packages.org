#+TITLE: Emacs Literate Package Additions
#+AUTHOR: Rohit Goswami (HaoZeke) <rohit.goswami@aol.com>
#+PROPERTY: header-args :tangle (concat doom-private-dir "packages.el")
#+PROPERTY: header-args+ :comments link
#+STARTUP: outline

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:

# Now we set this with STARTUP
# These can be set per subtree.
# :PROPERTIES:
# :VISIBILITY: children
# :END:

** Table of Contents :TOC_3_gh:noexport:
  - [[#about-this-file][About this file]]
    - [[#about-that-toc][About that TOC..]]
    - [[#the-properties][The properties]]
  - [[#later-magit-additions][LATER Magit Additions]]
  - [[#org-additions][Org Additions]]
    - [[#org-noter][Org Noter]]
  - [[#syntax-highlighting][Syntax Highlighting]]
    - [[#tup-mode][Tup Mode]]
    - [[#saltstack-mode][SaltStack Mode]]
    - [[#pkgbuild-mode][PKGBUILD Mode]]
  - [[#snippets][Snippets]]

** About this file
This is an Emacs literate package file. It contains the basic structure along
with some data about each package and why it's needed. This is to be used in
tandem with the ~define-package!~ function in ~config.org~.

Since it's primarily aimed at ~doom-emacs~ let's add their comments.

#+BEGIN_SRC emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; ~/.doom.d/packages.el
#+END_SRC

*** About that TOC..
So as mentioned [[https://github.com/snosov1/toc-org/issues/35][here]] there is trouble when ~org-export~ tries to create files
while keeping the ~org-toc~ tag.

It's not really a problem since ~org-export~ actually generates a TOC for the
files anyway.
*** The properties
Basically, the properties set imply that the file is to be tangled for every
block and moreover the output directory is the ~doom-private-dir~. It's
practically self explanatory but still. 

The filename is determined by the ~SRC~ block languages.

** LATER Magit Additions
These basically allow for TODOs in magit along with enhanced github integration.
These have been added upstream in ~develop~.

#+BEGIN_SRC emacs-lisp :tangle no
(package! magit-org-todos)
(package! magithub)
#+END_SRC

Actually [[https://github.com/alphapapa/magit-todos][magit-todos]] has been added upstream which collates all ~todo~ items.
There might still be workflows where [[https://github.com/danielma/magit-org-todos.el][magit-org-todos]] is useful since that
displays a global ~todo.org~ file.

** Org Additions

The new ones need to be covered in the ~config.org~ file with the appropriate
keybindings.

*** TODO Org Noter
This is sort of more of a ~pdf-tools~ extension and it needs it's own ~biblatex~
setup and stuff as well so this might move into a tree of it's own.

#+BEGIN_SRC emacs-lisp
;; (package! org-noter)
#+END_SRC
This actually breaks the ~pdf-tools~ bindings.

** Syntax Highlighting
These are additionally required to work with the sort of files I use often.
The configuration and settings are as usual in ~config.org~
*** Tup Mode
Because honestly there isn't anything better than [[http://gittup.org/tup/][tup]]. Who doesn't need a build
system which [[http://gittup.org/tup/tup_vs_mordor.html][scales with the eye of Mordor]]?

#+BEGIN_SRC emacs-lisp
(package! tup-mode
:recipe (:fetcher github
           :repo "ejmr/tup-mode"))
#+END_SRC

**** LATER Caveats
The repo is unmaintained so I ought to fork it and take a look into maintaining it.
*** SaltStack Mode
I have recently decided that [[https://saltstack.com/][saltstack]] ought to be used for working on multiple
systems.

#+BEGIN_SRC emacs-lisp
(package! salt-mode
:recipe (:fetcher github
         :repo "glynnforrest/salt-mode"))
#+END_SRC
*** PKGBUILD Mode
No point using ~emacs~ if I can't get highlighting for all my needs. This needs
some extra configuration. Must figure out if this is well mantained. Works for now.

#+BEGIN_SRC emacs-lisp
(package! pkgbuild-mode
  :recipe (:fetcher github
            :repo "juergenhoetzel/pkgbuild-mode"))
#+END_SRC

** Snippets
These are actually from the ~doom-emacs~ guy...

#+BEGIN_SRC emacs-lisp
(package! emacs-snippets
  :recipe (:fetcher github
           :repo "hlissner/emacs-snippets"
           :files ("*")))
#+END_SRC
