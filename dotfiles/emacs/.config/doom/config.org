#+TITLE: Literate doom-emacs config
#+AUTHOR: Rohit Goswami (HaoZeke) <rohit.goswami@aol.com>

** Table of Contents :noexport:TOC_3_gh:
  - [[#about][About]]
    - [[#about-that-toc][About that TOC..]]
  - [[#personal-information][Personal Information]]
  - [[#doom-emacs-stuff][Doom Emacs Stuff]]
    - [[#visual-tweaks][Visual tweaks]]
    - [[#kill-spellcheck][Kill spellcheck]]
  - [[#packages][Packages]]
    - [[#magit-aids][Magit Aids]]
    - [[#saltstack-settings][SaltStack Settings]]
  - [[#syntax-highlighting][Syntax Highlighting]]
    - [[#pkgbuild-mode][PKGBUILD Mode]]
    - [[#lammps-mode][LAMMPS Mode]]
  - [[#keybindings][Keybindings]]
    - [[#spacemacs-equivalency][Spacemacs Equivalency]]
    - [[#neotree----treemacs][Neotree --> Treemacs]]
  - [[#functions][Functions]]
    - [[#org-mode-export-pdf-when-saved][Org-mode export pdf when saved]]
    - [[#org-mode-export-tex-when-saved][Org-mode export tex when saved]]
    - [[#caveats][Caveats]]
    - [[#helper-function][Helper function]]
  - [[#safe-evals-and-variables][Safe Evals and Variables]]
    - [[#safe-variables][Safe variables]]
    - [[#safe-evals][Safe Evals]]
  - [[#troubleshooting][Troubleshooting]]
  - [[#temporary][Temporary]]
    - [[#latex-for-org-mode][LaTeX for Org mode]]
    - [[#org-ref-latex][Org Ref LaTeX]]
  - [[#flycheck-additions][Flycheck Additions]]
    - [[#melpa-helpers][MELPA Helpers]]
  - [[#references][References]]
    - [[#org-ref-ivy][Org Ref Ivy]]

** About
This is a literate config file for [[https://github.com/hlissner/doom-emacs][doom-emacs]] by
~hlinssner~. This
is meant to be used with the =develop= branch.
Much of the basic setup is pulled from the [[https://github.com/gilbertw1/emacs-literate-starter][emacs literate
starter]] by =gilbertw1=.

*** About that TOC..
So as mentioned [[https:https://github.com/snosov1/toc-org/issues/35][here]] there is trouble when ~org-export~ tries to create files
while keeping the ~org-toc~ tag.

It's not really a problem since ~org-export~ actually generates a TOC for the
files anyway.

** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Rohit Goswami (HaoZeke)"
      user-mail-address "rohit.goswami@aol.com")
#+END_SRC

** Doom Emacs Stuff
*** Visual tweaks
Honestly the basic font setting is simply not pretty enough.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Attribute Mono"
                           :size 20))
#+END_SRC

*** Kill spellcheck
This is really really really excruciatingly slow for LaTeX mode and maybe even
for other random buffers.

#+BEGIN_SRC emacs-lisp
(setq-hook! 'LaTeX-mode-hook +spellcheck-immediately nil)
#+END_SRC

** Packages
These should eventually go into a different module.
Each of these.

*** Magit Aids
**** DONE Magit todos
Of course this is not really meant to be here..
A variation of this was included upstream in the ~develop~ branch.

#+BEGIN_SRC emacs-lisp :tangle no
(def-package! magit-org-todos
  :mode "\\COMMIT_EDITMSG$"
  :commands (magit-org-todods magit-org-todos-autoinsert)
  :config
  (magit-org-todos-autoinsert))
#+END_SRC

**** DONE Magithub
This is for sweet github integration.
Also integrated upstream.

#+BEGIN_SRC emacs-lisp :tangle no
(def-package! magithub
  :after magit
  :commands (magithub-clone
             magithub-completion-enable)
  ;; :ensure t
  :config
  (magithub-feature-autoinject t)
  (setq
   magithub-clone-default-directory "$HOME/Git/Github/"
   magithub-dir (concat doom-etc-dir "magithub/")
   magithub-preferred-remote-method 'clone_url))
(def-package! evil-magit :after magit
  :init
  (setq evil-magit-state 'normal))
#+END_SRC
*** SaltStack Settings
I like having spell checks for the comments.

#+BEGIN_SRC emacs-lisp
;; Load it
(def-package! salt-mode)
;; Flyspell
(add-hook 'salt-mode-hook
        (lambda ()
            (flyspell-mode 1)))
#+END_SRC

** Syntax Highlighting
This section is for setting up major modes for various file formats which are
typically non-standard.

*** PKGBUILD Mode
#+BEGIN_SRC emacs-lisp
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode))
                              auto-mode-alist))
#+END_SRC

*** LAMMPS Mode
#+BEGIN_SRC emacs-lisp
(autoload 'lammps-mode "lammps-mode.el" "LAMMPS mode." t)
(setq auto-mode-alist (append auto-mode-alist
                              '(("in\\." . lammps-mode))
                              '(("\\.lmp\\'" . lammps-mode))
                              ))

#+END_SRC

** Keybindings

*** Spacemacs Equivalency
**** Escape
I find the default ~jk~ evil escape key sequence to be distracting as I am
unable to navigate with one hand on the mouse anymore.

#+BEGIN_SRC emacs-lisp
(setq-default evil-escape-key-sequence "fd")
#+END_SRC

**** Kill buffer
Also it's inconvinient to have a key chord requiring two hands to close a
buffer.

#+BEGIN_SRC emacs-lisp
; Bind a new key chord
(map!
 (:leader
   (:prefix "b"
     :desc "Kill buffer" :n "d" #'kill-this-buffer)))
#+END_SRC

*** DONE Neotree --> Treemacs
**** CANCELLED Toggle pane
This remaps ~SPC o N~ to use ~treemacs~.
I guess this doesn't make all that much sense, but ~t~ and ~T~ and bound to
terminals and that makes sense, so I guess this is fine.

#+BEGIN_SRC emacs-lisp :tangle no 
;; Remap opening the sidebar
(map! :leader
      :nv "o n" nil
      :desc "Open treemacs pane"
      :n "o n" #'+treemacs/toggle)
;; Remap finding stuff
(map! :leader
      :nv "o N" nil
      :desc "Treemacs find file"
      :n "o N" 'treemacs-find-file)
#+END_SRC

Cancelled since [[https://github.com/hlissner/doom-emacs/commit/287460cb050c94010f4d8ded0fbfecf479c1772a][this commit]] on the ~develop~ branch.

** Functions
*** Org-mode export pdf when saved
This one is to generate pdfs whenever a buffer is saved. Mainly taken from
[[https:https://emacs.stackexchange.com/questions/9893/how-can-i-export-to-latex-every-time-i-save-an-org-mode-buffer][this stack exchange question]].

#+BEGIN_SRC emacs-lisp
(defun haozeke/org-save-and-export-pdf ()
  (if (eq major-mode 'org-mode)
    (org-latex-export-to-pdf)))
#+END_SRC

*** Org-mode export tex when saved
Similar to the one above, but ~tex~ generation is much faster and this way I can
keep editing my files without waiting for it to finish creating the ~pdf~.

#+BEGIN_SRC emacs-lisp
(defun haozeke/org-save-and-export-tex ()
  (if (eq major-mode 'org-mode)
    (org-latex-export-to-latex)))
#+END_SRC

*** TODO Caveats
- Minted needs to be setup.
- There are really a lot of optimizations to the above.

*** Helper function
Figure out if I can replicate this some other way. Taken from [[https://github.com/sam217pa/emacs-config][sam217pa's github repo]].
#+BEGIN_SRC emacs-lisp
;; this function is used to append multiple elements to the list 'ox-latex
(defun append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR. The return value is the new value of LIST-VAR."
  (unless (consp elements) (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
(symbol-value list-var))
#+END_SRC

** Safe Evals and Variables
*** Safe variables
The problem is that ~packages.el~ isn't being produced by the clever little ugly
commit I tried so, this is a workaround to tangle *any* file to be produced in
~.el~ format in the same location.
**** Tangle
So adding the automatic tangling code doesn't mangle things up everytime you
open emacs. Basically this is adapted from [[https://www.reddit.com/r/emacs/comments/5d4hqq/using_babel_to_put_your_init_file_in_org/][this reddit thread]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'safe-local-variable-values
             '(eval add-hook 'after-save-hook
	                (lambda () (org-babel-tangle))
	                nil t))
#+END_SRC

**** TODO Export
This is a catch all for the eventual ~org-mode~ based multiple target exports.

#+BEGIN_SRC emacs-lisp
(add-to-list 'safe-local-variable-values
                '(eval add-hook 'after-save-hook 'haozeke/org-save-and-export-tex nil t)
                '(eval add-hook 'after-save-hook 'haozeke/org-save-and-export-pdf nil t))
#+END_SRC

**** TODO Caveats
- This actually forms it relative to the exact path. 
  (Gotta move it to the config folder)
- The actual code is much more elegant in every way possible.
- Seriously there has to be  a way to not have to do this.
  
  
*** TODO Safe Evals
This enables the evaluation of these forms. Read more about this via
~docstrings~ sometime.

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'safe-local-eval-forms (eval add-hook 'after-save-hook haozeke/org-save-and-export))
#+END_SRC
  
** Troubleshooting
These are strictly temporary hacks to resolve problems until they are fixed
upstream.


** Temporary

*** LaTeX for Org mode
Pretty this up. Consider using file templates or something. Atleast make a
proper repo. This is really ad-hoc right now and from [[https://www.reddit.com/r/emacs/comments/54g578/anyone_go_from_using_latex_to_org_mode/][this reddit thread]].
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (append-to-list
   'org-latex-classes
   '(("tufte-book"
      "\\documentclass[a4paper, sfsidenotes, openany, justified]{tufte-book}
     \\input{/home/haozeke/Git/tufte-book.tex}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("utf8" . "utf8x")
      ("\\subsection{%s}" . "\\subsection*{%s}")))))
#+END_SRC
*** Org Ref LaTeX
This is really not part of my workflow...
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

** Flycheck Additions
These are basically meant to aid in development. The relevant linters are also
added here.

*** MELPA Helpers
This includes settings for both flycheck and the packages it needs.
#+BEGIN_SRC emacs-lisp
(def-package! flycheck-package
  :after flycheck
  :config (flycheck-package-setup))
#+END_SRC

** TODO References
*** Basic Setup
This is a standard [[https://github.com/jkitchin/org-ref][org-ref]] setup.
#+BEGIN_SRC emacs-lisp :tangle no
(setq reftex-default-bibliography '("~/Documents/References/zotero.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Documents/References/notes.org"
      org-ref-default-bibliography '("~/Documents/References/zotero.bib")
      org-ref-pdf-directory "~/Documents/References/bibtex-pdfs/")

(setq bibtex-completion-notes-path "~/Documents/References/notes.org"
      bibtex-completion-bibliography '("~/Documents/References/zotero.bib")
      bibtex-completion-library-directory "~/Documents/References/bibtex-pdfs/")
#+END_SRC

+I don't actually use ~org-ref-pdf-directory~ or ~org-ref-bibliography-notes~ so
I should change those soon.+

Depreciated in favor of a better setup.

*** noteYoda 
This is largely inspired from [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][this reddit comment]]. For clarity and extensibility
this will be broken down into a per-package configuration. The heart of this is
an [[https://rclone.org/mega/][rclone mega]] folder to manage all these transparently. With this setup links
to the files are stored in [[https://www.zotero.org/][zotero]] and managed by [[https://github.com/jlegewie/zotfile][zotfile]]. More on this in a post later.

**** Org-Ref 
[[https://github.com/jkitchin/org-ref][This]] seems like an ubiquitous choice for working with org files and references.

#+BEGIN_SRC emacs-lisp
(setq org-ref-notes-directory "~/.megaRefs/Notes"
      org-ref-bibliography-notes "~/.megaRefs/articles.org"
      org-ref-default-bibliography '("~/.megaRefs/Bibliographies/zotLib.bib")
      org-ref-pdf-directory "~/.megaRefs/Papers/")
#+END_SRC

Apparently, ~org-ref~ is also able to fetch ~pdf~ files when ~DOI~ or ~URL~
links are dragged onto the ~.bib~ file. However, since ~zotero~ will handle the
metadata, this remains to be considered.

**** Helm-Bibtex
Name aside, [[https://github.com/tmalsburg/helm-bibtex][this]] also works for ~ivy~. Basically meant to interface with
bibliographies in general.

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-bibliography "~/.megaRefs/Bibliographies/zotLib.bib"
      helm-bibtex-library-path "~/.megaRefs/Papers/"
      helm-bibtex-notes-path "~/.megaRefs/articles.org")
#+END_SRC

**** Org-Noter
I decided to use [[https://github.com/weirdNox/org-noter][org-noter]] over the more commonly described [[https://github.com/rudolfochrist/interleave][interleave]] because
it has better support for working with multiple documents linked to one file.

#+BEGIN_SRC emacs-lisp
;; bspwm can handle splits
(setq org-noter-always-create-frame nil
;; Everything is relative to the rclone mega
      org-noter-notes-search-path '("~/.megaRefs/Notes"
                                    "~/.megaRefs/"
                                    "~/Documents"))
#+END_SRC

*** Reftex
Actually I don't really use ~reftex~ since I'm using heavier tools now, but it
still needs some setup.

#+BEGIN_SRC emacs-lisp
(setq reftex-default-bibliography '("~/.megaRefs/Bibliographies/zotLib.bib"))
#+END_SRC


*** Org Ref Ivy
Ivy is used exclusively throughout ~doom~, makes sense to use it here too.
#+BEGIN_SRC emacs-lisp
(setq org-ref-completion-library 'org-ref-ivy-cite)
#+END_SRC
