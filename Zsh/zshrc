# The following lines were added by compinstall

#zstyle ':completion:*' completer _expand _complete _ignored _approximate
#zstyle ':completion:*' list-colors ''
#zstyle ':completion:*' menu select=1
#zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
#zstyle ':completion:*' verbose true
#zstyle :compinstall filename '/home/$USER/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=100000000
SAVEHIST=100000000
setopt appendhistory autocd beep notify
setopt HIST_IGNORE_DUPS
bindkey -e
# End of lines configured by zsh-newuser-install


#                    			KEYS
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi
#        Custom
alias bookserve='calibre-server --port 8264 --auto-reload --username $USER --daemonize'
alias mediaserve='rygel --config=/home/$USER/.config/rygel.conf'
alias pizza.py='~/Github/pizza-9Oct15/src/pizza.py'
export EDITOR='vim'
alias ratemi='sudo reflector --verbose  -l 20 -p http --sort rate --save /etc/pacman.d/mirrorlist' # --country 'India'
export USE_CCACHE=1
ccache -M 50G
export MPD_HOST='192.168.31.4'
export WINEPREFIX=$HOME/.wine/
export WINEARCH=win32
export QT_STYLE_OVERRIDE=gtk2
export QT_QPA_PLATFORMTHEME=gtk2
export XDG_CURRENT_DESKTOP=KDE # this is a horrible hack but it keeps my themes working.
export LD=ld.gold
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export USE_HOST_LEX=yes  			# Prevent builds breaking..
#export JAVA_HOME='/usr/lib/jvm/java-7-openjdk'
export _JAVA_AWT_WM_NONREPARENTING=1 # Otherwise bspwm kinda kills java GUI's
export PACMAN='powerpill'     # Gets powerpill to work with pacaur
export QT_AUTO_SCREEN_SCALE_FACTOR=0
alias FlashTool='sudo FlashTool'
alias cantata='cantata -style=gtk2'
alias foldel='time rsync -avv --delete /home/$USER/blank/ '
alias quup='time yaourt -Syua --noconfirm --devel'
alias cpv="rsync -poghb --backup-dir=/tmp/rsync -e /dev/null --progress --"

# Encfs Safe Files
alias z3op='mkdir /home/$USER/Encfs/Secrets ;encfs -i 5 /run/media/$USER/Storage/.Secrets /home/$USER/Encfs/Secrets'
alias z3cl='sudo umount /home/$USER/Encfs/Secrets ; rm -rf /home/$USER/Encfs/Secrets'

# Calibre Upgrade
alias caliup='sudo -v && wget --no-check-certificate -nv -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"'

# PowerPill
# powerpill alias examples
alias pacupg='sudo powerpill -Syu'		# Synchronize with repositories and then upgrade packages that are out of date on the local system.
alias pacdl='powerpill -Sw'		# Download specified package(s) as .tar.xz ball
alias pacin='sudo powerpill -S'		# Install specific package(s) from the repositories
alias pacins='sudo powerpill -U'		# Install specific package not from the repositories but from a file 
alias pacre='sudo powerpill -R'		# Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pacrem='sudo powerpill -Rns'		# Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacrep='powerpill -Si'		# Display information about a given package in the repositories
alias pacreps='powerpill -Ss'		# Search for package(s) in the repositories
alias pacloc='powerpill -Qi'		# Display information about a given package in the local database
alias paclocs='powerpill -Qs'		# Search for package(s) in the local database
alias paclo="powerpill -Qdt"		# List all packages which are orphaned
alias pacc="sudo powerpill -Scc"		# Clean cache - delete all the package files in the cache
alias paclf="powerpill -Ql"		# List all files installed by a given package
alias pacown="powerpill -Qo"		# Show package(s) owning the specified file(s)
alias pacexpl="powerpill -D --asexp"	# Mark one or more installed packages as explicitly installed 
alias pacimpl="powerpill -D --asdep"	# Mark one or more installed packages as non explicitly installed

# Additional powerpill alias examples
alias pacupd='sudo powerpill -Sy && sudo abs'         # Update and refresh the local package and ABS databases against repositories
alias pacinsd='sudo powerpill -S --asdeps'            # Install given package(s) as dependencies
alias pacmir='sudo powerpill -Syy'                    # Force refresh of all package lists after updating /etc/powerpill.d/mirrorlist

# Look for yaourt, and add some useful functions if we have it.
if [[ -x `command -v yaourt` ]]; then
  upgrade () {
    yaourt -Syu
  }
  alias yaconf='yaourt -C'        # Fix all configuration files with vimdiff
  # Pacman - https://wiki.archlinux.org/index.php/Pacman_Tips
  alias yaupg='yaourt -Syua'        # Synchronize with repositories before upgrading packages (AUR packages too) that are out of date on the local system.
  alias yasu='yaourt --sucre'      # Same as yaupg, but without confirmation
  alias yain='yaourt -S'           # Install specific package(s) from the repositories
  alias yains='yaourt -U'          # Install specific package not from the repositories but from a file
  alias yare='yaourt -R'           # Remove the specified package(s), retaining its configuration(s) and required dependencies
  alias yarem='yaourt -Rns'        # Remove the specified package(s), its configuration(s) and unneeded dependencies
  alias yarep='yaourt -Si'         # Display information about a given package in the repositories
  alias yareps='yaourt -Ss'        # Search for package(s) in the repositories
  alias yaloc='yaourt -Qi'         # Display information about a given package in the local database
  alias yalocs='yaourt -Qs'        # Search for package(s) in the local database
  alias yalst='yaourt -Qe'         # List installed packages, even those installed from AUR (they're tagged as "local")
  alias yaorph='yaourt -Qtd'       # Remove orphans using yaourt
  # Additional yaourt alias examples
  if [[ -x `command -v abs` && -x `command -v aur` ]]; then
    alias yaupd='yaourt -Sy && sudo abs && sudo aur'  # Update and refresh the local package, ABS and AUR databases against repositories
  elif [[ -x `command -v abs` ]]; then
    alias yaupd='yaourt -Sy && sudo abs'   # Update and refresh the local package and ABS databases against repositories
  elif [[ -x `command -v aur` ]]; then
    alias yaupd='yaourt -Sy && sudo aur'   # Update and refresh the local package and AUR databases against repositories
  else
    alias yaupd='yaourt -Sy'               # Update and refresh the local package database against repositories
  fi
  alias yainsd='yaourt -S --asdeps'        # Install given package(s) as dependencies of another package
  alias yamir='yaourt -Syy'                # Force refresh of all package lists after updating /etc/pacman.d/mirrorlist
else
 upgrade() {
   sudo pacman -Syu
 }
fi


# dealing with the following message from powerpill:
# 
#     error: couldnt lock database: file exists
#     if you are sure a package manager is not already running, you can remove /var/lib/powerpill/db.lck

alias pacunlock="sudo rm /var/lib/pacman/db.lck"   # Delete the lock file /var/lib/pacman/db.lck
alias paclock="sudo touch /var/lib/pacman/db.lck"  # Create the lock file /var/lib/pacman/db.lck


# FUNCTIONS

# https://bbs.archlinux.org/viewtopic.php?id=93683
paclist() {
  LC_ALL=C pacman -Qei $(pacman -Qu|cut -d" " -f 1)|awk ' BEGIN {FS=":"}/^Name/{printf("\033[1;36m%s\033[1;37m", $2)}/^Description/{print $2}'
}

alias paclsorphans='sudo pacman -Qdt'
alias pacrmorphans='sudo pacman -Rs $(pacman -Qtdq)'

pathdup() {
if [ -n "$PATH" ]; then
old_PATH=$PATH:; PATH=
 while [ -n "$old_PATH" ]; do
x=${old_PATH%%:*}       # the first remaining entry
case $PATH: in
*:"$x":*) ;;         # already there
*) PATH=$PATH:$x;;    # not there yet
 esac
old_PATH=${old_PATH#*:}
done
PATH=${PATH#:}
unset old_PATH x
fi  
}

pacdisowned() {
  tmp=${TMPDIR-/tmp}/pacman-disowned-$UID-$$
  db=$tmp/db
  fs=$tmp/fs

  mkdir "$tmp"
  trap  'rm -rf "$tmp"' EXIT

  pacman -Qlq | sort -u > "$db"

  find /bin /etc /lib /sbin /usr \
      ! -name lost+found \
        \( -type d -printf '%p/\n' -o -print \) | sort > "$fs"

  comm -23 "$fs" "$db"
}

pacmanallkeys() {
  # Get all keys for developers and trusted users
  curl https://www.archlinux.org/{developers,trustedusers}/ |
  awk -F\" '(/pgp.mit.edu/) {sub(/.*search=0x/,"");print $1}' |
  xargs sudo pacman-key --recv-keys
}

pacmansignkeys() {
  for key in $*; do
    sudo pacman-key --recv-keys $key
    sudo pacman-key --lsign-key $key
    printf 'trust\n3\n' | sudo gpg --homedir /etc/pacman.d/gnupg \
      --no-permission-warning --command-fd 0 --edit-key $key
  done
}

# Orphaned Packages.
orphans() {
  if [[ ! -n $(pacaur -Qdt) ]]; then
    echo "No orphans to remove."
  else
    sudo powerpill -Rns $(powerpill -Qdtq)
  fi
}

# Commandline Git Repo Creation
    DroidBuild() {
echo "Setting up environment variables\n"
export USE_HOST_LEX=yes       # Prevent builds breaking..
# Sets the right path for linkers. cm-12.1 only.
#export LD_LIBRARY_PATH=/run/media/haozeke/Storage/AndBuild/cm-12.1/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.8/lib/
echo "Getting the right Python\n"
source /run/media/haozeke/Storage/AndBuild/venv/bin/activate
echo "Getting the right tools for Gello \n"
export PATH=$HOME/Github/Linux/depot_tools:$PATH
echo "Enjoy.\n"
    }
# Conforming to standards

export XDG_CONFIG_HOME="$HOME/.config"

#       FONTS

# Makes fonts darker and thicker
export INFINALITY_FT_BRIGHTNESS="-10"

# Not too sharp, not too smooth
export INFINALITY_FT_FILTER_PARAMS="16 20 28 20 16"

# Fix virtual pythons
export WORKON_HOME=~/.virtualenvs
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/bin/virtualenvwrapper.sh

export PATH="$HOME/.node_modules/bin:$PATH:$HOME/LabWork/IITB/Icover:/root/.gem/ruby/2.2.0/bin:$HOME/Matlab/MATLAB_Production_Server/R2015a/bin:$HOME/.gem/ruby/2.2.0/bin:$HOME/.gem/ruby/2.3.0/bin:/opt/schrodinger2016-2:$HOME/Github/mylammps/src:$HOME/Github/espresso/build:$HOME/Github/Scripts/Build:$HOME/Github/Scripts/System"

# Add /usr/local/lib to libraries PATH
 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
 export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/include
 export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/include

export PYTHONPATH=$PYTHONPATH:/home/$USER/Github/espresso:/home/$USER/Github/Linux/acd_fuse:/usr/share/amazon/pyacd

#MATLAB Helper
#wmname LG3D  Depreceiated in favor of script; for breaking xfce4-panel windowmanager.
# Replaced with a shell script hack to prevent or try to suppress crap on the command line.
#export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
export _SILENT_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
unset _JAVA_OPTIONS
alias java='java "$_SILENT_JAVA_OPTIONS"'

export JAVA_FONTS=/usr/share/fonts/TTF
# Alias for External Hard Disk
alias Storage='/run/media/$USER/Storage'


# Pulled from an oh my zsh plugin
# ls, the common ones I use a lot shortened for rapid fire usage
alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable
alias lr='ls -tRFh'   #sorted by date,recursive,show type,human readable
alias lt='ls -ltFh'   #long list,sorted by date,show type,human readable
alias ll='ls -l'      #long list
alias ldot='ls -ld .*'
alias lS='ls -1FSsh'
alias lart='ls -1Fcart'
alias lrt='ls -1Fcrt'

alias zshrc='$EDITOR ~/.zshrc' # Quick access to the ~/.zshrc file

alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '

alias t='tail -f'

# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g M="| most"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

alias h='history'
alias hgrep="fc -El 0 | grep"
alias help='man'
alias p='ps -f'
alias sortnr='sort -n -r'
alias unexport='unset'

alias whereami=display_info

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# IE Alias.
# To get this working install winetricks and run
# WINEARCH=win32 WINEPREFIX=~/.wine-ie6 winetricks ie6
alias ie6=' WINEARCH=win32 WINEPREFIX=~/.wine-ie6 wine ~/.wine-ie6/drive_c/Program\ Files/Internet\ Explorer/IEXPLORE.EXE'

# zsh is able to auto-do some kungfoo
# depends on the SUFFIX :)
if [ ${ZSH_VERSION//\./} -ge 420 ]; then
  # open browser on urls
  _browser_fts=(htm html de org net com at cx nl se dk dk php)
  for ft in $_browser_fts ; do alias -s $ft=$BROWSER ; done

  _editor_fts=(cpp cxx cc c hh h inl asc txt TXT tex)
  for ft in $_editor_fts ; do alias -s $ft=$EDITOR ; done

  _image_fts=(jpg jpeg png gif mng tiff tif xpm)
  for ft in $_image_fts ; do alias -s $ft=$XIVIEWER; done

  _media_fts=(ape avi flv mkv mov mp3 mpeg mpg ogg ogm rm wav webm)
  for ft in $_media_fts ; do alias -s $ft=mplayer ; done

  #read documents
  alias -s pdf=okular
  alias -s ps=gv
  alias -s dvi=okular
  alias -s chm=okular
  alias -s djvu=okular

  #list whats inside packed file
  alias -s zip="unzip -l"
  alias -s rar="unrar l"
  alias -s tar="tar tf"
  alias -s tar.gz="echo "
  alias -s ace="unace l"
fi

# Make zsh know about hosts already accessed by SSH
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'


# Allow SSH tab completion for mosh hostnames
compdef mosh=ssh

#           ZGEN
source ~/Github/Dotfiles/Zsh/zgen/zgen.zsh

# check if there's no init script
if ! zgen saved; then
    echo "Creating a zgen save"
    zgen oh-my-zsh

    # plugins
   # zgen oh-my-zsh plugins/git
    zgen oh-my-zsh plugins/sudo
    zgen oh-my-zsh plugins/systemd
    zgen oh-my-zsh plugins/colored-man-pages
    zgen oh-my-zsh plugins/command-not-found
    zgen oh-my-zsh plugins/tmux
    zgen oh-my-zsh plugins/history
    zgen oh-my-zsh plugins/github
    zgen oh-my-zsh plugins/git
    zgen oh-my-zsh plugins/systemadmin
#    zgen oh-my-zsh plugins/gulp
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load rimraf/k

    # For zgen autoupdate with  ZGEN_PLUGIN_UPDATE_DAYS  ZGEN_SYSTEM_UPDATE_DAYS default 7
  #  zgen load unixorn/autoupdate-zgen

    # completions
    zgen load zsh-users/zsh-completions src
    zgen load ascii-soup/zsh-url-highlighter
    zgen load djui/alias-tips
    zgen load srijanshetty/zsh-pip-completion

    # colors
    zgen load zlsun/solarized-man
    # theme
  #  zgen oh-my-zsh themes/nicoulaj
 #   zgen load chrissicool/zsh-256color
  #  zgen load mbauhardt/spowerline
   # zgen load caiogondim/bullet-train-oh-my-zsh-theme bullet-train
    # save all to init script
    zgen save
fi



# tmux Stuff
PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'
export TERM=xterm-256color
alias tmux="tmux -2"

# source /usr/lib/python3.4/site-packages/powerline/bindings/zsh/powerline.zsh
# source ~/.local/lib/python3.4/site-packages/powerline/bindings/zsh/powerline.zsh
 source ~/.shell_prompt.sh

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# Added manually cuz zgen wasn't working. It's from gulp oh my zsh. Changed for babel
function $$gulp_completion {
    compls="$(grep -Eo "gulp.task\((['\"](([a-zA-Z0-9]|-)*)['\"],)" gulpfile.babel.js 2>/dev/null | grep -Eo "['\"](([a-zA-Z0-9]|-)*)['\"]" | sed s/"['\"]"//g | sort)"

    completions=(${=compls})
    compadd -- $completions
}

compdef $$gulp_completion gulp

# pip zsh completion start
 function _pip_completion {
   local words cword
     read -Ac words
       read -cn cword
         reply=( $( COMP_WORDS="$words[*]" \
                      COMP_CWORD=$(( cword-1 )) \
                                   PIP_AUTO_COMPLETE=1 $words[1] )
                                   )
                                   }
                                   compctl -K _pip_completion pip
# pip zsh completion end

# For terminix to not complain about login shells.
source /etc/profile.d/vte.sh

# NPM Stuff
export npm_config_prefix=~/.node_modules

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"
